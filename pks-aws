#!/bin/bash
set -e

PKS_CLI=$(basename $0 | sed 's/-aws$//')
$(which ${PKS_CLI} > /dev/null) || {
  echo "${PKS_CLI} is not installed."
  exit 1
}

red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`
reset=`tput sgr0`


OPERATION=$1
CLUSTER_NAME=$2

function usage {
  echo "USAGE: $0
  create-tags <CLUSTER_NAME> <ENV_NAME>
  delete-tags <CLUSTER_NAME> <ENV_NAME>
  create-lb <CLUSTER_NAME> <ENV_NAME> (<LB_NAME>)
  attach-lb <CLUSTER_NAME> (<LB_NAME>)
  delete-lb <CLUSTER_NAME> (<LB_NAME>)
  create-record <CLUSTER_NAME> <FQDN> <HOSTED_ZONE> (<LB_NAME>)"
}

if [ "${CLUSTER_NAME}" == "" ];then
  usage
  exit 1
fi

if [ "${OPERATION}" == "" ];then
  usage
  exit 1
fi

function lb-security-group {
  # Try security-group for terraforming-aws first
  SG=$(aws ec2 describe-security-groups \
    --filters "Name=tag:Name,Values=$ENV_NAME-pks-master-security-group" \
    --query "SecurityGroups[*].{ID:GroupId}" --output text)
  if [ "${SG}" == "" ];then
    # If not found, try security-group for paving next
    SG=$(aws ec2 describe-security-groups \
      --filters "Name=tag:Name,Values=$ENV_NAME-pks-api-lb-sg" \
      --query "SecurityGroups[*].{ID:GroupId}" --output text)
  fi
  echo $SG
}

function worker-security-group {
  # Try security-group for terraforming-aws first
  SG=$(aws ec2 describe-security-groups \
    --filters "Name=tag:Name,Values=$ENV_NAME-vms-security-group" \
    --query "SecurityGroups[*].{ID:GroupId}" --output text)
  if [ "${SG}" == "" ];then
    # If not found, try security-group for paving next
    SG=$(aws ec2 describe-security-groups \
      --filters "Name=tag:Name,Values=$ENV_NAME-platform-vms-sg" \
      --query "SecurityGroups[*].{ID:GroupId}" --output text)
  fi
  echo $SG
}

function create-tags {
  ENV_NAME=$1
  if [ "${ENV_NAME}" == "" ];then
    usage
    exit 1
  fi

  subnets=($(aws ec2 describe-subnets \
    --filters "Name=tag:Name,Values=$ENV_NAME-public-subnet*" \
    --query 'Subnets[*].[SubnetId]' \
    --output text))

  vpcid=$(aws ec2 describe-subnets \
    --filters "Name=tag:Name,Values=$ENV_NAME-public-subnet*" \
    --query 'Subnets[*].[VpcId][0][0]' \
    --output text)

  cluster_uuid=$(${PKS_CLI} cluster ${CLUSTER_NAME} --json | jq -r .uuid)

  tag_key="kubernetes.io/cluster/service-instance_${cluster_uuid}"
  for subnet in ${subnets[@]};do
    echo -e "${green}Checking if Tag (${tag_key}) exists in public subnet (${subnet}) for LoadBalancer type service${reset}" 1>&2
    tag=$(aws ec2 describe-tags --filters "Name=resource-id,Values=${subnet}" --query 'Tags' --output json | jq -r "map(select(.Key == \"${tag_key}\"))[0].Key")
    if [ "${tag}" == "null" ];then
      echo -e "${green}Adding Tag (${tag_key}) to public subnet (${subnet}) for LoadBalancer type service${reset}" 1>&2
      aws ec2 create-tags --resources "$subnet" --tags Key="${tag_key}",Value="shared"
    else
      echo -e "${yellow}Already created. Skip.${reset}" 1>&2
    fi
  done

  security_group_id=$(worker-security-group)
  echo -e "${green}Checking if Tag (${tag_key}) exists in security group (${security_group_id}) for LoadBalancer type service ${reset}" 1>&2
  tag=$(aws ec2 describe-tags --filters "Name=resource-id,Values=${security_group_id}" --query 'Tags' --output json | jq -r "map(select(.Key == \"${tag_key}\"))[0].Key")
  if [ "${tag}" == "null" ];then
    echo -e "${green}Adding Tag (${tag_key}) to security group (${security_group_id}) for LoadBalancer type service${reset}" 1>&2
    aws ec2 create-tags --resources "${security_group_id}" --tags Key="${tag_key}",Value="shared"
  else
    echo -e "${yellow}Already created. Skip.${reset}" 1>&2
  fi
}


function delete-tags {
  ENV_NAME=$1
  if [ "${ENV_NAME}" == "" ];then
    usage
    exit 1
  fi

  subnets=($(aws ec2 describe-subnets \
    --filters "Name=tag:Name,Values=$ENV_NAME-public-subnet*" \
    --query 'Subnets[*].[SubnetId]' \
    --output text))

  vpcid=$(aws ec2 describe-subnets \
    --filters "Name=tag:Name,Values=$ENV_NAME-public-subnet*" \
    --query 'Subnets[*].[VpcId][0][0]' \
    --output text)

  cluster_uuid=$(${PKS_CLI} cluster ${CLUSTER_NAME} --json | jq -r .uuid)

  tag_key="kubernetes.io/cluster/service-instance_${cluster_uuid}"
  for subnet in ${subnets[@]};do
    echo -e "${green}Checking if Tag (${tag_key}) exists in public subnet (${subnet}) for LoadBalancer type service${reset}" 1>&2
    tag=$(aws ec2 describe-tags --filters "Name=resource-id,Values=${subnet}" --query 'Tags' --output json | jq -r "map(select(.Key == \"${tag_key}\"))[0].Key")
    if [ "${tag}" == "null" ];then
      echo -e "${yellow}Already deleted. Skip.${reset}" 1>&2
    else
      echo -e "${green}Deleting Tag (${tag_key}) from public subnet (${subnet}) for LoadBalancer type service${reset}" 1>&2
      aws ec2 delete-tags --resources "$subnet" --tags Key="${tag_key}",Value="shared"
    fi
  done

  security_group_id=$(worker-security-group)
  echo -e "${green}Checking if Tag (${tag_key}) exists in security group (${security_group_id}) for LoadBalancer type service ${reset}" 1>&2
  tag=$(aws ec2 describe-tags --filters "Name=resource-id,Values=${security_group_id}" --query 'Tags' --output json | jq -r "map(select(.Key == \"${tag_key}\"))[0].Key")
  if [ "${tag}" == "null" ];then
    echo -e "${yellow}Already deleted. Skip.${reset}" 1>&2
  else
    echo -e "${green}Deleting Tag (${tag_key}) to security group (${security_group_id}) for LoadBalancer type service${reset}" 1>&2
    aws ec2 delete-tags --resources "${security_group_id}" --tags Key="${tag_key}",Value="shared"
  fi
}

function create-lb {
  ENV_NAME=$1
  LB_NAME=$2
  if [ "${ENV_NAME}" == "" ];then
    usage
    exit 1
  fi
  if [ "${LB_NAME}" == "" ];then
    LB_NAME=pks-${CLUSTER_NAME}
  fi

  subnets=($(aws ec2 describe-subnets \
    --filters "Name=tag:Name,Values=$ENV_NAME-public-subnet*" \
    --query 'Subnets[*].[SubnetId]' \
    --output text))

  vpcid=$(aws ec2 describe-subnets \
    --filters "Name=tag:Name,Values=$ENV_NAME-public-subnet*" \
    --query 'Subnets[*].[VpcId][0][0]' \
    --output text)

  echo -e "${green}Creating load-balancer for ${LB_NAME}${reset}" 1>&2
  aws elbv2 create-load-balancer \
    --name ${LB_NAME} \
    --type network \
    --subnets "${subnets[0]}" "${subnets[1]}" "${subnets[2]}" > /dev/null

  lb_arn=$(aws elbv2 describe-load-balancers --names ${LB_NAME} --query 'LoadBalancers[0].LoadBalancerArn' --output text)

  echo -e "${green}Creating target-group for ${LB_NAME}${reset}" 1>&2
  aws elbv2 create-target-group \
    --name ${LB_NAME}-tg-8443 \
    --protocol TCP \
    --port 8443 \
    --target-type ip \
    --vpc-id ${vpcid} > /dev/null

  target_group_arn=$(aws elbv2 describe-target-groups \
    --names ${LB_NAME}-tg-8443 \
    --query 'TargetGroups[0].TargetGroupArn' \
    --output text)

  echo -e "${green}Creating listener for ${LB_NAME}${reset}" 1>&2
  aws elbv2 create-listener \
    --load-balancer-arn ${lb_arn} \
    --protocol TCP \
    --port 8443 \
    --default-actions Type=forward,TargetGroupArn=${target_group_arn} > /dev/null
  # show dns name
  aws elbv2 describe-load-balancers --names ${LB_NAME} --query 'LoadBalancers[0].DNSName' --output text
}

function attach-lb {
  LB_NAME=$1
  if [ "${LB_NAME}" == "" ];then
    LB_NAME=pks-${CLUSTER_NAME}
  fi

  target_group_arn=$(aws elbv2 describe-target-groups \
    --names ${LB_NAME}-tg-8443 \
    --query 'TargetGroups[0].TargetGroupArn' \
    --output text)

  echo -e "${green}Register target(${target_group_arn}) for ${LB_NAME}${reset}"
  aws elbv2 register-targets \
      --target-group-arn ${target_group_arn} \
      --targets $(${PKS_CLI} cluster ${CLUSTER_NAME} --json | jq -r '.kubernetes_master_ips | map(. = "Id=" + .) | @tsv')
}

function delete-lb {
  LB_NAME=$1
  if [ "${LB_NAME}" == "" ];then
    LB_NAME=pks-${CLUSTER_NAME}
  fi

  lb_arn=$(aws elbv2 describe-load-balancers --names ${LB_NAME} --query 'LoadBalancers[0].LoadBalancerArn' --output text)
  listener_arn=$(aws elbv2 describe-listeners --load-balancer-arn ${lb_arn} --query 'Listeners[0].ListenerArn' --output text)
  target_group_arn=$(aws elbv2 describe-target-groups \
    --names ${LB_NAME}-tg-8443 \
    --query 'TargetGroups[0].TargetGroupArn' \
    --output text)
  set +e
  echo -e "${green}Deleting listener for ${LB_NAME}${reset}"
  aws elbv2 delete-listener --listener-arn ${listener_arn}
  echo -e "${green}Deleting target-group for ${LB_NAME}${reset}"
  aws elbv2 delete-target-group --target-group-arn ${target_group_arn}
  set -e
  echo -e "${green}Deleting load-balancer for ${LB_NAME}${reset}"
  aws elbv2 delete-load-balancer --load-balancer-arn ${lb_arn}
}

function generate_route53_body {
  cat <<EOF
{
  "Comment": "Creating Alias resource record sets in Route 53",
  "Changes": [{
    "Action": "CREATE",
    "ResourceRecordSet": {
      "Name": "${FQDN}",
      "Type": "A",
      "AliasTarget":{
        "HostedZoneId": "${CANONICAL_HOSTED_ZONE_NAME_ID}",
        "DNSName": "dualstack.${DNS_NAME}",
        "EvaluateTargetHealth": false
      }}
  }]
}
EOF
}

function create-record {
  FQDN=$1
  HOSTED_ZONE=$2
  LB_NAME=$3
  if [ "${LB_NAME}" == "" ];then
    LB_NAME=pks-${CLUSTER_NAME}
  fi
  CANONICAL_HOSTED_ZONE_NAME_ID=$(aws elbv2 describe-load-balancers --names ${LB_NAME} --query 'LoadBalancers[0].CanonicalHostedZoneId' --output text)
  DNS_NAME=$(aws elbv2 describe-load-balancers --names ${LB_NAME} --query 'LoadBalancers[0].DNSName' --output text)
  HOSTED_ZONE_ID=$(aws route53 list-hosted-zones | jq -r ".HostedZones | map(select(.Name== \"${HOSTED_ZONE}.\" and .Config.PrivateZone==false))[0].Id")

  route53_body=$(mktemp /tmp/route53_body.XXXX)
  echo "$(generate_route53_body)" > ${route53_body}

  aws route53 change-resource-record-sets --hosted-zone-id "${HOSTED_ZONE_ID}" --change-batch file://${route53_body}
  rm -f "${route53_body}"
}

case $OPERATION in
  create-tags)
    create-tags $3
    ;;
  delete-tags)
    delete-tags $3
    ;;
  create-lb)
    create-lb $3
    ;;
  attach-lb)
    attach-lb $3
    ;;
  delete-lb)
    delete-lb $3
    ;;
  create-record)
    create-record $3 $4 $5
    ;;
  *)
    usage
    exit 1
esac
