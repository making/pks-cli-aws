#!/bin/bash
set -e

red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`
reset=`tput sgr0`


OPERATION=$1
CLUSTER_NAME=$2

function usage {
  echo "USAGE: $0
  create-tags <CLUSTER_NAME> <ENV_NAME>
  create-lb <CLUSTER_NAME> <ENV_NAME> (<LB_NAME>)
  attach-lb <CLUSTER_NAME> (<LB_NAME>)
  delete-lb <CLUSTER_NAME> (<LB_NAME>)
  create-record <CLUSTER_NAME> <FQDN> <HOSTED_ZONE> (<LB_NAME>)"
}

if [ "${CLUSTER_NAME}" == "" ];then
  usage
  exit 1
fi

if [ "${OPERATION}" == "" ];then
  usage
  exit 1
fi

MASTERS=$(mktemp /tmp/master.XXXX)

function generate-masters() {
  aws ec2 describe-instances \
  --filters "Name=tag:deployment,Values=service-instance_$(pks cluster ${CLUSTER_NAME} --json | jq -r .uuid)"  "Name=tag:instance_group,Values=master" "Name=instance-state-name,Values=running" \
  --query "Reservations[].Instances[].[VpcId,InstanceId]" \
  --output text \
  > $MASTERS
}

function lb-security-group {
  aws ec2 describe-security-groups \
    --filters "Name=tag:Name,Values=$ENV_NAME-pks-master-security-group" \
    --query "SecurityGroups[*].{ID:GroupId}" --output text
}

function worker-security-group {
  aws ec2 describe-security-groups \
    --filters "Name=tag:Name,Values=$ENV_NAME-vms-security-group" \
    --query "SecurityGroups[*].{ID:GroupId}" --output text
}

function create-tags {
  ENV_NAME=$1
  if [ "${ENV_NAME}" == "" ];then
    usage
    exit 1
  fi
  
  generate-masters

  CLUSTER_VPC=$(basename $(head -1 $MASTERS | cut -d' ' -f1))
  CLUSTER_UUID=$(pks cluster ${CLUSTER_NAME} --json | jq -r .uuid)

  echo -e "${green}Fetching public subnets from vpc $CLUSTER_VPC ${reset}" 1>&2
  subnets=$(aws ec2 describe-subnets \
    --filters "Name=vpc-id,Values=$CLUSTER_VPC" "Name=tag:Name,Values=$ENV_NAME-public-subnet*" \
    --query 'Subnets[*].[SubnetId]' \
    --output text)

  TAG_KEY="kubernetes.io/cluster/service-instance_$CLUSTER_UUID"
  for subnet in ${subnets[@]};do
    echo -e "${green}Checking if Tag (${TAG_KEY}) exists in public subnet (${subnet}) for LoadBalancer type service${reset}" 1>&2
    tag=$(aws ec2 describe-tags --filters "Name=resource-id,Values=${subnet}" --query 'Tags' --output json | jq -r "map(select(.Key == \"${TAG_KEY}\"))[0].Key")
    if [ "${tag}" == "null" ];then
      echo -e "${green}Adding Tag (${TAG_KEY}) to public subnet (${subnet}) for LoadBalancer type service${reset}" 1>&2
      aws ec2 create-tags --resources "$subnet" --tags Key="${TAG_KEY}",Value="shared"
    else
      echo -e "${yellow}Already created. Skip.${reset}" 1>&2
    fi
  done

  SECURITY_GROUP_ID=$(worker-security-group)
  echo -e "${green}Checking if Tag (${TAG_KEY}) exists in security group (${SECURITY_GROUP_ID}) for LoadBalancer type service ${reset}" 1>&2
  tag=$(aws ec2 describe-tags --filters "Name=resource-id,Values=${SECURITY_GROUP_ID}" --query 'Tags' --output json | jq -r "map(select(.Key == \"${TAG_KEY}\"))[0].Key")
  if [ "${tag}" == "null" ];then
    echo -e "${green}Adding Tag (${TAG_KEY}) to security group (${SECURITY_GROUP_ID}) for LoadBalancer type service${reset}" 1>&2
    aws ec2 create-tags --resources "${SECURITY_GROUP_ID}" --tags Key="${TAG_KEY}",Value="shared"
  else
    echo -e "${yellow}Already created. Skip.${reset}" 1>&2
  fi
}

function create-lb {
  ENV_NAME=$1
  LB_NAME=$2
  if [ "${ENV_NAME}" == "" ];then
    usage
    exit 1
  fi
  if [ "${LB_NAME}" == "" ];then
    LB_NAME=k8s-master-${CLUSTER_NAME}
  fi 

  SECURITY_GROUP_ID=$(lb-security-group)

  echo -e "${green}Creating ELB (${LB_NAME})${reset}" 1>&2

  subnets=($(aws ec2 describe-subnets \
    --filters "Name=tag:Name,Values=$ENV_NAME-public-subnet*" \
    --query 'Subnets[*].[SubnetId]' \
    --output text))

  aws elb create-load-balancer --load-balancer-name ${LB_NAME} \
    --listeners "Protocol=TCP,LoadBalancerPort=8443,InstanceProtocol=TCP,InstancePort=8443" \
    --subnets "${subnets[0]}" "${subnets[1]}" "${subnets[2]}" --security-groups $SECURITY_GROUP_ID | jq -r .DNSName
}

function attach-lb {
  LB_NAME=$1
  if [ "${LB_NAME}" == "" ];then
    LB_NAME=k8s-master-${CLUSTER_NAME}
  fi
  
  generate-masters

  lb=$(aws elb describe-load-balancers --output json | jq -r ".LoadBalancerDescriptions | map(select(.LoadBalancerName == \"${LB_NAME}\"))[0].LoadBalancerName")
  if [ "${lb}" == "null" ];then
    echo -e "${red}ELB (${LB_NAME}) does not exist. ${reset}" 1>&2
    exit 1
  fi
  while read -r vpc instance;do
    echo -e "${green}Adding ${instance} to load balancer ${LB_NAME} ${reset}" 1>&2
    aws elb register-instances-with-load-balancer --load-balancer-name ${LB_NAME} --instances $instance > /dev/null
  done < "$MASTERS"
}


function delete-lb {
  LB_NAME=$1
  if [ "${LB_NAME}" == "" ];then
    LB_NAME=k8s-master-${CLUSTER_NAME}
  fi
  
  generate-masters

  lb=$(aws elb describe-load-balancers --output json | jq -r ".LoadBalancerDescriptions | map(select(.LoadBalancerName == \"${LB_NAME}\"))[0].LoadBalancerName")
  if [ "${lb}" == "null" ];then
    echo -e "${red}ELB (${LB_NAME}) does not exist. ${reset}" 1>&2
    exit 1
  fi
  echo -e "${green}Deleting load balancer ${LB_NAME}${reset}"
  aws elb delete-load-balancer --load-balancer-name ${LB_NAME}
}

function generate_route53_body {
  cat <<EOF
{
  "Comment": "Creating Alias resource record sets in Route 53",
  "Changes": [{
    "Action": "CREATE",
    "ResourceRecordSet": {
      "Name": "${FQDN}",
      "Type": "A",
      "AliasTarget":{
        "HostedZoneId": "${CANONICAL_HOSTED_ZONE_NAME_ID}",
        "DNSName": "dualstack.${DNS_NAME}",
        "EvaluateTargetHealth": false
      }}
  }]
}
EOF
}

function create-record {
  FQDN=$1
  HOSTED_ZONE=$2
  LB_NAME=$3
  if [ "${LB_NAME}" == "" ];then
    LB_NAME=k8s-master-${CLUSTER_NAME}
  fi
  lb=$(aws elb describe-load-balancers --output json)

  CANONICAL_HOSTED_ZONE_NAME_ID=$(echo ${lb} | jq -r ".LoadBalancerDescriptions | map(select(.LoadBalancerName == \"${LB_NAME}\"))[0].CanonicalHostedZoneNameID")
  DNS_NAME=$(echo ${lb} | jq -r ".LoadBalancerDescriptions | map(select(.LoadBalancerName == \"${LB_NAME}\"))[0].DNSName")
  HOSTED_ZONE_ID=$(aws route53 list-hosted-zones | jq -r ".HostedZones | map(select(.Name== \"${HOSTED_ZONE}.\" and .Config.PrivateZone==false))[0].Id")

  route53_body=$(mktemp /tmp/route53_body.XXXX)
  echo "$(generate_route53_body)" > ${route53_body}

  aws route53 change-resource-record-sets --hosted-zone-id "${HOSTED_ZONE_ID}" --change-batch file://${route53_body}
  rm -f "${route53_body}"
}

case $OPERATION in
  create-tags)
    create-tags $3
    ;;
  create-lb)
    create-lb $3
    ;;
  attach-lb)
    attach-lb $3
    ;;
  delete-lb)
    delete-lb $3
    ;;
  create-record)
    create-record $3 $4 $5
    ;;
  *)
    usage
    exit 1
esac
